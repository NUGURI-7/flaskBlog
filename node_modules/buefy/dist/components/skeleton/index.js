/*! Buefy v0.2.0 | MIT License | github.com/buefy/buefy */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Skeleton = {}, global.Vue));
})(this, (function (exports, vue) { 'use strict';

    const SKELETON_POSITIONS = ["", "is-centered", "is-right"];
    const BSkeleton = (props) => {
      if (!props.active)
        return;
      const items = [];
      const width = props.width;
      const height = props.height;
      for (let i = 0; i < props.count; i++) {
        items.push(vue.h("div", {
          class: [
            "b-skeleton-item",
            { "is-rounded": props.rounded }
          ],
          key: i,
          style: {
            height: height === void 0 ? null : isNaN(+height) ? height : height + "px",
            width: width === void 0 ? null : isNaN(+width) ? width : width + "px",
            borderRadius: props.circle ? "50%" : null
          }
        }));
      }
      return vue.h(
        "div",
        {
          class: [
            "b-skeleton",
            props.size,
            props.position,
            { "is-animated": props.animated }
          ]
        },
        items
      );
    };
    BSkeleton.props = {
      active: {
        type: Boolean,
        default: true
      },
      animated: {
        type: Boolean,
        default: true
      },
      width: [Number, String],
      height: [Number, String],
      circle: Boolean,
      rounded: {
        type: Boolean,
        default: true
      },
      count: {
        type: Number,
        default: 1
      },
      position: {
        type: String,
        default: "",
        validator(value) {
          return SKELETON_POSITIONS.indexOf(value) > -1;
        }
      },
      size: String
    };
    var _sfc_main = BSkeleton;

    var _export_sfc = (sfc, props) => {
      const target = sfc.__vccOpts || sfc;
      for (const [key, val] of props) {
        target[key] = val;
      }
      return target;
    };

    var Skeleton = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/home/runner/work/buefy-next/buefy-next/packages/buefy-next/src/components/skeleton/Skeleton.vue"]]);

    const registerComponent = (Vue, component, name) => {
      const componentName = name || component.name;
      if (componentName == null) {
        throw new Error("Buefy.registerComponent: missing component name");
      }
      Vue.component(componentName, component);
    };

    const Plugin = {
      install(Vue) {
        registerComponent(Vue, Skeleton, "BSkeleton");
      }
    };

    exports.BSkeleton = Skeleton;
    exports.default = Plugin;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
